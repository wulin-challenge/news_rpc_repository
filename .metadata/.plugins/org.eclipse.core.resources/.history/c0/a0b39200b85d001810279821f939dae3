package com.bjhy.news.client.spring;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;

import com.bjhy.cache.toolkit.extension.ExtensionLoader;
import com.bjhy.news.client.spring.connect.SpringLoadNewsConnect;
import com.bjhy.news.common.annotation.NewsListenerService;
import com.bjhy.news.common.connect.AdaptiveNewsConnect;
import com.bjhy.news.common.connect.ConnectConfig;
import com.bjhy.news.common.domain.PublishServiceInfo;
import com.bjhy.news.common.init.AdaptiveNewsInitializing;
import com.bjhy.news.common.zookeeper.AdaptivePublishService;
import com.bjhy.news.rpc.api.netty.AdaptiveRpcInvokeService;

import cn.wulin.ioc.URL;

@Component
public class ApplicationContextHelper implements DisposableBean, BeanFactoryPostProcessor, BeanPostProcessor, ApplicationContextAware{
	
	private static transient ApplicationContext applicationContext;

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		ApplicationContextHelper.applicationContext = applicationContext;
	}

	public static ApplicationContext getApplicationContext() {
		return applicationContext;
	}

	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		NewsListenerService service = bean.getClass().getAnnotation(NewsListenerService.class);
		if(SpringInitConfig.class == bean.getClass()){
			System.out.println("before---"+service);
		}
		return bean;
	}

	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		NewsListenerService service = bean.getClass().getAnnotation(NewsListenerService.class);
		if(SpringInitConfig.class == bean.getClass()){
			System.out.println("after---"+service);
		}
		
		return bean;
	}

//	@Override
	public void afterPropertiesSet() throws Exception {
		AdaptiveNewsConnect.setDefaultAdaptiveNewsConnect("spring.news.connect");
//		AdaptivePublishService.setDefaultAdaptivePublishService("spring.publish.service");
//		AdaptiveRpcInvokeService.setDefaultRpcInvokeService("netty.rpc.invoke.service");
//		AdaptiveNewsInitializing.setDefaultAdaptiveNewsInitializing("spring.news.initializing");
//		
//		//之所将该对象从spring的applicationContext中取出来存储在 ExtensionLoader 中,是为避免 子线程访问 spring 的applicationContext 报 java.util.ConcurrentModificationException 异常
//		ExtensionLoader.setInstance(SpringLoadNewsConnect.class, ApplicationContextHelper.getApplicationContext().getBean(SpringLoadNewsConnect.class));
//		
//		Map<String,String> params = new HashMap<String,String>();
//		URL url = new URL("initializing", "0.0.0.0", 0, params);
//		ConnectConfig.getInstance().connectEntry(url);
	}

	@Override
	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
		
	}

	@Override
	public void destroy() throws Exception {
	}

	@Override
	public int getOrder() {
		return Ordered.LOWEST_PRECEDENCE;
	}
	
	public List<PublishServiceInfo> getPublishServiceInfo() {
		List<PublishServiceInfo> spiList = new ArrayList<>();
		
//		ApplicationContext applicationContext = ApplicationContextHelper.getApplicationContext();
//		Map<String, Object> serviceBeanMap = applicationContext.getBeansWithAnnotation(NewsListenerService.class);
//        if (MapUtils.isNotEmpty(serviceBeanMap)) {
//            for (Object serviceBean : serviceBeanMap.values()) {
//            	PublishServiceInfo publishServiceInfo = new PublishServiceInfo();
//            	
//            	NewsListenerService newsListenerService = serviceBean.getClass().getAnnotation(NewsListenerService.class);
//                String serviceVersion = newsListenerService.syncVersion();
//                int syncTimeout = newsListenerService.syncTimeout();
//                
//                if (StringUtils.isNoneBlank(serviceVersion)) {
//                	publishServiceInfo.setSyncVersion(serviceVersion);
//                }
//                
//                publishServiceInfo.setServiceClass(newsListenerService.value());
//                publishServiceInfo.setSyncTimeout(syncTimeout);
//                publishServiceInfo.setServiceImplObject(serviceBean);
//                spiList.add(publishServiceInfo);
//            }
//        }
		return spiList;
	}
	
}
